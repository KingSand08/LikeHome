// To get the middle ware started, you must first navigate to the like home folder
// In this folder, open a terminal and run "npx prisma generate"
// Following this, make sure prisma is up to date with the DB by running "npx prisma db pull" *only run this once or it will say smt about Re-Introspection
// To check if the DB is linked and working run "npx prisma studio" (it will display the database)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  // Bare minimum data
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique

  rewardPoints   Int           @default(0)
  redeemedPoints Int           @default(0)
  reservations   Reservation[]
}

model Reservation {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  userEmail        String
  user             User            @relation(fields: [userEmail], references: [email])
  checkin_date     String
  checkout_date    String
  adults_number    Int
  numDays          Int
  hotel_id         String
  room_id          String
  payment_info     PaymentInfo
  transaction_info TransactionInfo
  verified         Boolean         @default(false)
  room_cost        Float
}

type PaymentInfo {
  firstName      String
  lastName       String
  billingAddress String
  city           String
  state          String
  zipCode        String
  email          String
}

type TransactionInfo {
  dateCreated     String
  stripePaymentId String
}

model Region {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  region_id   String      @unique
  type        String
  regionNames RegionNames
  coordinates Coordinates
  country     Country

  // hotels      Hotel[]
}

type RegionNames {
  fullName             String
  shortName            String
  displayName          String
  primaryDisplayName   String
  secondaryDisplayName String
  lastSearchName       String
}

type Coordinates {
  lat  String
  long String
}

type Country {
  name   String
  domain String // Using isoCode2 as domain
}

// Caching
model CachedHotel {
  id              String                 @id @default(auto()) @map("_id") @db.ObjectId
  hotel_id        String                 @unique
  tagline         String
  location        Location
  images          Image[]
  hotelRoomOffers CachedHotelRoomOffer[]
}

model CachedHotelRoomOffer {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  hotel_id      String
  hotel         CachedHotel @relation(fields: [hotel_id], references: [hotel_id])
  hotel_room_id String      @unique
  description   String
  name          String
  galleryImages Image[]

  @@index([hotel_id])
}

type Location {
  address     Address
  coordinates Coordinates
}

type Address {
  addressLine String
  city        String
  province    String
  countryCode String
}

type Image {
  description String
  url         String
  alt         String
  index       Int
}
